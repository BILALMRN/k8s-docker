openapi: 3.0.0
info:
  title: Backend API
  description: API Backend for a sample application Ecommerce
  license: GPL-3.0 license
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1/
tags:
  - name: Admin
    description: Everything about your Admin
  - name: User
    description: Operations about user
  - name: Product
    description: Operations about Product
  - name: Order
    description: Access to orders
  - name: Stock
    description: Access to Stock
paths:
  /product:
    get:
      tags:
       - Product
      summary: Get all products
      operationId: getProducts
      responses:
        '200':
          description: OK

    post:
      tags:
       - Product
      summary: Create a new product
      operationId: createProduct
      requestBody:
        description: Product details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'

  /product/{id}:
    get:
      tags:
       - Product
      summary: Get a product by ID
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

    delete:
      tags:
       - Product
      summary: Delete a product by ID
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  /product/inStock:
    get:
      tags:
       - Product
      summary: Get all available products in stock
      operationId: getAllAvailableProductsInStock
      responses:
        '200':
          description: OK

  /product/search/{nameProduct}:
    get:
      tags:
       - Product
      summary: Search products by name
      operationId: searchProductFromDB
      parameters:
        - name: nameProduct
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Products not found

  /product/discounted:
    get:
      tags:
       - Product
      summary: Get products with discount
      operationId: getProductsParDiscount
      responses:
        '200':
          description: OK
        '404':
          description: No products found

  /product/suggestion/{category}:
    get:
      tags:
       - Product
      summary: Get product suggestions by category
      operationId: getSuggestion
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: No suggested products found

  #####        
  /admin/{id}:
    get:
      tags:  
        - Admin
      summary: Get admin account by ID
      operationId: getAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

  /admin/login:
    get:
      tags: 
        - Admin
      summary: Log in to the admin account
      operationId: loginAccountUser
      responses:
        '200':
          description: OK

  /admin:
    post:
      tags: 
        - Admin
      summary: Create a new admin account
      operationId: createAccount
      requestBody:
        description: Admin account details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                urlPhotoProfile:
                  type: string
                coverPhoto:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                city:
                  type: string
                zip:
                  type: string
                country:
                  type: string
              required:
                - username
                - password
                - first_name
                - last_name
                - email
              # Add other required fields as needed
      responses:
        '201':
          description: Created

    put:
      tags: 
        - Admin
      summary: Update an admin account
      operationId: updateAccount
      requestBody:
        description: Admin account details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                urlPhotoProfile:
                  type: string
                coverPhoto:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                city:
                  type: string
                zip:
                  type: string
                country:
                  type: string
              required:
                - username
                - password
                - first_name
                - last_name
                - email
              # Add other required fields as needed
      responses:
        '200':
          description: OK
        '404':
          description: Not Found

    delete:
      tags: 
        - Admin
      summary: Delete an admin account
      operationId: deleteAccount
      responses:
        '204':
          description: No Content




  /Order:
    post:
      tags: 
        - Order
      summary: Create a new order
      operationId: createOrder
      requestBody:
        description: Order details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductOrder'

    put:
      tags: 
        - Order
      summary: Update order status by order ID
      operationId: updateOrderStatus
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated order status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
              required:
                - status

    get:
      tags: 
        - Order
      summary: Get user order history by user ID
      operationId: getUserOrderHistory
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductOrder'

  /Order/adminhistory:
    get:
      tags: 
        - Order
      summary: Get all orders (admin)
      operationId: getAllOrders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductOrder'

  /stock/user:
    put:
      tags: 
        - Stock
      summary: Update stock for a product (user)
      operationId: updateStockProductUser
      requestBody:
        description: Product details for stock update (user)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: number
              required:
                - product_id
      responses:
        '201':
          description: Stock updated successfully
        '400':
          description: Invalid input or product_id

  /stock/admin:
    put:
      tags: 
        - Stock
      summary: Update stock for a product (admin)
      operationId: updateStockProductAdmin
      requestBody:
        description: Product details for stock update (admin)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: number
                newStock:
                  type: number
              required:
                - product_id
                - newStock
      responses:
        '201':
          description: Stock updated successfully
        '400':
          description: Invalid input or product_id


  /user/{id}:
    get:
      tags: 
        - User
      summary: Get account by ID
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/login:
    get:
      tags: 
        - User
      summary: Log in to the account
      operationId: loginAccount
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string

    post:
      tags: 
        - User
      summary: Create a new account
      operationId: createAccount
      requestBody:
        description: Account details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created

    put:
      tags: 
        - User
      summary: Update an account
      operationId: updateAccount
      requestBody:
        description: Account details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error

    delete:
      tags: 
        - User
      summary: Delete an account
      operationId: deleteAccount
      parameters:
        - name: id
          in: header
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error



components:
  schemas:
    User:
      type: object
      properties:
        password_hash:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        zip:
          type: number
        country:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - password_hash
        - first_name
        - last_name
        - email
        - address
        - city
        - zip
        - country
        - createdAt
        - updatedAt


    ProductOrder:
      type: object
      properties:
        product_order_id:
          type: number
        product_id:
          type: number
        admin_id:
          type: number
        user_id:
          type: number
        quantity:
          type: number
        price:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        status:
          type: string
      required:
        - product_order_id
        - product_id
        - admin_id
        - user_id
        - quantity
        - price
        - created_at
        - updated_at
        - status


    Product:
      type: object
      properties:
        product_id:
          type: number
        admin:
          $ref: '#/components/schemas/Admin'
        name_product:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: number
        main_photo:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        photos:
          type: array
          items:
            $ref: '#/components/schemas/ProductPhoto'


    Category:
      type: object
      properties:
        category_id:
          type: number
        name:
          type: string
        description:
          type: string

    PhotoProduct:
      type: object
      properties:
        id:
          type: number
          nullable: true
        product:
          $ref: '#/components/schemas/Product'
        url:
          type: string

    Admin:
      type: object
      properties:
        admin_id:
          type: number
        username:
          type: string
          uniqueItems: true
        password_hash:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        urlPhotoProfile:
          type: string
          nullable: true
        coverPhoto:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        zip:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
